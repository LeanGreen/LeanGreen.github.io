<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生信点滴</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://LeanGreen.github.io/"/>
  <updated>2016-12-29T08:37:56.633Z</updated>
  <id>http://LeanGreen.github.io/</id>
  
  <author>
    <name>LeanGreen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sed 使用变量替代字符</title>
    <link href="http://LeanGreen.github.io/2016/12/29/sed%20%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F%E6%9B%BF%E4%BB%A3%E5%AD%97%E7%AC%A6/"/>
    <id>http://LeanGreen.github.io/2016/12/29/sed 使用变量替代字符/</id>
    <published>2016-12-29T08:06:59.000Z</published>
    <updated>2016-12-29T08:37:56.633Z</updated>
    
    <content type="html"><![CDATA[<p>一般在使用sed的时候，都是使用单引号，例如：</p>
<blockquote>
<p>ls tag/*1.txt |sed  ‘s/tag\///;s/1.txt//‘</p>
</blockquote>
<p>这个可以获得文件夹中符合条件的文件名，<strong>使用分号可以替换两次</strong>，去掉头尾<br>或者：</p>
<blockquote>
<p>echo “aaaa” | sed -n ‘s/aaaa/bbbb/p’</p>
</blockquote>
<p>替换字符</p>
<p>但是如果想用变量来进行替换：</p>
<blockquote>
<p>b=bbbb<br>echo “aaaa” | sed -n ‘s/aaaa/$b/p’</p>
</blockquote>
<p>无法成功<br>想要成功替换，需要<strong>将单引号换成双引号</strong></p>
<p>但是如果：</p>
<blockquote>
<p>b=bbbb/bbbb<br>echo “aaaa” | sed -n “s/aaaa/$b/p”</p>
</blockquote>
<p>还是无法成功，因为其中的”/“符号被错误时别了<br>这时候只需要<strong>将”/“符号替换成”#”</strong>就可以了</p>
<blockquote>
<p>b=bbbb/bbbb<br>echo “aaaa” | sed -n “s#aaaa#$b#p”</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般在使用sed的时候，都是使用单引号，例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ls tag/*1.txt |sed  ‘s/tag\///;s/1.txt//‘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个可以获得文件夹中符合条件的文件名，&lt;strong&gt;使用分
    
    </summary>
    
      <category term="Linux" scheme="http://LeanGreen.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://LeanGreen.github.io/tags/Linux/"/>
    
      <category term="Shell" scheme="http://LeanGreen.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>使用Aspera connect下载NCBI上的GEO/SRA数据</title>
    <link href="http://LeanGreen.github.io/2016/12/27/%E4%BD%BF%E7%94%A8Aspera-connect%E4%B8%8B%E8%BD%BDNCBI%E4%B8%8A%E7%9A%84GEO-SRA%E6%95%B0%E6%8D%AE/"/>
    <id>http://LeanGreen.github.io/2016/12/27/使用Aspera-connect下载NCBI上的GEO-SRA数据/</id>
    <published>2016-12-27T08:58:58.000Z</published>
    <updated>2016-12-30T02:22:56.533Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>由于平时在GEO上下载数据速度太慢，所以使用<strong>Aspera connect</strong>进行下载，一般可以达到宽带的最大下载速度。</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>首先，到Aspera网站下载你的操作系统对应的Aspera connect。(本人为Ubuntu 16.04 LTS) 。解压缩后运行，<strong>不需要root或者sudo权限</strong>（本人尝试，root运行不了)：</p>
<p><strong><code>$ sh aspera-connect-3.6.2.117442-linux-64.sh</code></strong></p>
<p>安装好以后，会在/home/的个人目录下新建一个叫.aspera的目录，我们只用到其中的两个文件:</p>
<p>~/.aspera/connect/etc/asperaweb_id_dsa.openssh和~/.aspera/可以将密钥备份到/home/的个人目录下方便使用:</p>
<p><strong><code>$ cp ~/.aspera/connect/etc/asperaweb_id_dsa.openssh ~/</code></strong></p>
<p>并且要把aspera-license复制到系统目录/usr/local/bin/中：</p>
<p><strong><code>$ sudo cp ~/.aspera/connect/etc/aspera-license /usr/local/bin/</code></strong><br><a id="more"></a><br>为了方便调用，将ascp可执行文件的路径加入PATH变量中，以我的Ubuntu系统为例：</p>
<p><strong><code>$ vim ~/.bashrc</code></strong></p>
<p>然后将如下代码添加到最后：</p>
<p><strong><code>export PATH=&quot;$PATH:/home/用户名/.aspera/connect/bin</code></strong></p>
<p>保存退出后更新一下：</p>
<p><strong><code>$ source ~/.bashrc</code></strong></p>
<p>此时可以看一下$PATH，尝试一下ascp这个命令了：</p>
<p><strong><code>$ echo $PATH</code></strong><br><strong><code>$ ascp</code></strong></p>
<p>显示用法如下：</p>
<pre>
Usage: ascp [OPTION] SRC... DEST
          SRC to DEST, or multiple SRC to DEST dir
          SRC, DEST format: [[user@]host:]PATH
Display full usage: -h,--help
</pre>

<h3 id="2-下载数据"><a href="#2-下载数据" class="headerlink" title="2.下载数据"></a>2.下载数据</h3><p>下载代码如下：<br><strong><code>$ ./ascp -QTr -l 100M -i ~/asperaweb_id_dsa.openssh anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByStudy/sra/SRP/SRP066/SRP066824 .</code></strong></p>
<p>CentOS系统会报错如下，原因未知，换成Ubuntu后就没有了：<br><strong><code>Session Stop  (Error: Client unable to connect to server (check UDP port and firewall))</code></strong></p>
<p>如果提示：<br><strong><code>Key passphrase:</code></strong><br>则可能是由于密钥文件asperaweb_id_dsa.openssh写成了asperaweb_id_dsa.putty。</p>
<p>有博客上这样写：<br><strong><code>./ascp ~/asperaweb_id_dsa.openssh anonftp@ftp-private.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByStudy/sra/SRP/SRP066/SRP066824/SRR2967009 .</code></strong><br>但是我尝试了会报错：<br><strong><code>ascp: no remote host specified, exiting.</code></strong></p>
<h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h3><p>例如我的文件在：<br><strong><code>ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByStudy/sra/SRP/SRP066/SRP066824</code></strong><br>那就将：<br><strong><code>ftp://ftp-trace.ncbi.nlm.nih.gov</code></strong><br>后面的提取出来，在前面加上：<br><strong><code>anonftp@ftp-private.ncbi.nlm.nih.gov:</code></strong><br>即可。</p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>如需从EBI下载，可以继续参考：<a href="http://www.plob.org/article/3013.html" title="Title" target="_blank" rel="external">使用Aspera从EBI或NCBI下载基因组数据</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;由于平时在GEO上下载数据速度太慢，所以使用&lt;strong&gt;Aspera connect&lt;/strong&gt;进行下载，一般可以达到宽带的最大下载速度。&lt;/p&gt;
&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h3&gt;&lt;p&gt;首先，到Aspera网站下载你的操作系统对应的Aspera connect。(本人为Ubuntu 16.04 LTS) 。解压缩后运行，&lt;strong&gt;不需要root或者sudo权限&lt;/strong&gt;（本人尝试，root运行不了)：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ sh aspera-connect-3.6.2.117442-linux-64.sh&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装好以后，会在/home/的个人目录下新建一个叫.aspera的目录，我们只用到其中的两个文件:&lt;/p&gt;
&lt;p&gt;~/.aspera/connect/etc/asperaweb_id_dsa.openssh和~/.aspera/可以将密钥备份到/home/的个人目录下方便使用:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ cp ~/.aspera/connect/etc/asperaweb_id_dsa.openssh ~/&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;并且要把aspera-license复制到系统目录/usr/local/bin/中：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$ sudo cp ~/.aspera/connect/etc/aspera-license /usr/local/bin/&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://LeanGreen.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://LeanGreen.github.io/tags/Linux/"/>
    
      <category term="NCBI" scheme="http://LeanGreen.github.io/tags/NCBI/"/>
    
      <category term="software" scheme="http://LeanGreen.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>如何在win7上通过GitHub+Hexo搭建个人博客</title>
    <link href="http://LeanGreen.github.io/2016/12/27/%E5%A6%82%E4%BD%95%E5%9C%A8win7%E4%B8%8A%E9%80%9A%E8%BF%87GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://LeanGreen.github.io/2016/12/27/如何在win7上通过GitHub+Hexo搭建个人博客/</id>
    <published>2016-12-27T03:51:23.000Z</published>
    <updated>2016-12-30T02:28:07.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-搭建所需环境"><a href="#1-搭建所需环境" class="headerlink" title="1. 搭建所需环境"></a>1. 搭建所需环境</h3><h4 id="1-1-Git"><a href="#1-1-Git" class="headerlink" title="1.1 Git"></a>1.1 Git</h4><p>首先到<a href="https://git-scm.com/downloads/" title="Git 下载地址" target="_blank" rel="external">这里</a>下载git，然后逐步进行安装。</p>
<blockquote>
<p>在开始菜单找到Git Bash右键属性，修改Git Bash的配置 : 将Git Bash设置为快速编辑模式, 可以更好的使用该命令行工具。</p>
</blockquote>
<h4 id="1-2-配置SSH-Key"><a href="#1-2-配置SSH-Key" class="headerlink" title="1.2 配置SSH-Key"></a>1.2 配置SSH-Key</h4><p>打开Git bash，执行：<br><strong><code>$ ssh-keygen -t rsa -C &quot;your_email@email.com&quot;</code></strong></p>
<p>该命令后面的邮箱就是GitHub的注册邮箱;<br>使用该命令之后, 会出现提示选择ssh-key生成路径, 这里直接点回车默认即可, 生成的ssh-key在默认路径中。<br>Overwrite (y/n)?则输入y再回车<br>Enter passphrase (empty for no passphrase)则输入密码，该密码以后每次提交博客更新时都会需要；然后在确认输入一次。<br><a id="more"></a><br>结果显示如下：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Users/用户/.ssh/id_rsa):</div><div class="line">/c/Users/用户/.ssh/id_rsa already exists.</div><div class="line">Overwrite (y/n)? y</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /c/Users/用户/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Users/用户/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:K9bUvRrhpwHYzji/F6OftENZ7DVIvrWjqymGjtVD9Fw dflzzcz<span class="meta">@outlook.com</span></div><div class="line">The key's randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|<span class="string">                 </span>|</div><div class="line">|<span class="string">            .    </span>|</div><div class="line">|<span class="string">        .  +E.   </span>|</div><div class="line">|<span class="string">       + + o= +  </span>|</div><div class="line">|<span class="string">      . S =+.+ o </span>|</div><div class="line">|<span class="string">       O +=.o.o  </span>|</div><div class="line">|<span class="string">      *.Bo=oo. . </span>|</div><div class="line">|<span class="string">     +.++ooX.    </span>|</div><div class="line">|<span class="string">    ....o=Oo..   </span>|</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure></p>
<p>进入生成的ssh目录: C:\Users\用户.ssh中, 使用记事本打开id_rsa.pub文件, 将该文件中的内容<strong>复制</strong>;<br>例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAtT1YCeaNulpfC+ARq</div><div class="line">AWrCdfpi6CpW3gkGT0hp6Q8by7NnEfy4dah9CwSrNbWJH5eS4tiqc</div><div class="line">kE+bdbSVNvAboFDwDweG<span class="regexp">/6J/</span>SDYV<span class="regexp">/Ac/</span>fODgLJDFxk1Fwk/TTqTcb</div><div class="line">tLab1toLcts3zGIW5DstA3RQ0CCX/sPew5m7vh7DcKXluj2TBd9hwD</div><div class="line">weG<span class="regexp">/6J/</span>SDYV/ADFN</div></pre></td></tr></table></figure></p>
<p>进入GitHub个人的Settings -&gt; <strong>SSH and GPG keys</strong>中，点击<strong>New SSH key</strong>，将复制的内容粘贴进去并保存。<br>使用如下命令检测是否成功（不用改代码）：<br><strong><code>ssh -T git@github.com</code></strong><br>此时会提示输入密码，输入前面的密码，回车即可，结果如下：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase <span class="keyword">for</span> <span class="keyword">key</span> <span class="comment">'/c/Users/用户/.ssh/id_rsa':</span></div><div class="line">Hi \~\~\~! You<span class="comment">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>
<p>下一步是设置用户名和邮箱:<br><strong><code>$ git config --global user.name &quot;your_name&quot;</code></strong> //设置用户名<br><strong><code>$ git config --global user.email &quot;your_email@email.com&quot;</code></strong> //设置邮箱<br>可通过命令查看设置情况：<br><strong><code>$ git config -l</code></strong></p>
<p>到此Git客户端已安装及GitHub配置完成，现在可以从GitHub传输代码了。</p>
<blockquote>
<p>另外，还可以设置Git本地项目开发库默认路径<br>如果设置了，就不用每次打开Git再cd打开目录了。方法：右键Git Bash，找到快捷方式-起始位置，把你的项目地址放在这里就可以了。<br><strong>我设置了，但是没用！！</strong></p>
</blockquote>
<p>具体步骤还可以参考：<a href="http://www.jb51.net/article/55438.htm" title="Git客户端图文详解" target="_blank" rel="external">Git客户端图文详解 如何安装配置GitHub操作流程攻略</a></p>
<h4 id="1-3-node-js"><a href="#1-3-node-js" class="headerlink" title="1.3 node.js"></a>1.3 node.js</h4><p>然后到<a href="https://nodejs.org/en/" title="Node.js 下载地址" target="_blank" rel="external">这里</a>，然后安装，<strong>这个是必须要有的</strong>。</p>
<h4 id="1-4-配置Github"><a href="#1-4-配置Github" class="headerlink" title="1.4 配置Github"></a>1.4 配置Github</h4><h5 id="新建Repository"><a href="#新建Repository" class="headerlink" title="新建Repository"></a>新建Repository</h5><p>到GitHub，建立与你用户名对应的仓库，仓库名必须为<strong>your_user_name.github.io</strong></p>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>首先，打开Git命令行，执行如下命令后关闭：<br><strong><code>$ npm install -g hexo</code></strong> #安装<br><strong><code>$ npm update hexo -g</code></strong> #升级</p>
<p>然后<strong>在电脑中建立一个文件夹用于存放建立网站所需要的文件，如my_blog</strong>，并在此文件夹上右键打开Git Bash，执行：<br><strong><code>$ hexo init</code></strong><br>便可以自动在目标文件夹建立网站所需文件。<br>还需要<br><strong><code>npm install hexo-deployer-git --save</code></strong><br>否则以后hexo deploy的时候会报错：<br><code>error deployer not found:git</code></p>
<p>然后按照提示，在该文件夹位置运行：<br><strong><code>$ npm install</code></strong><br>会在D:\Hexo目录中安装 node_modules依赖。</p>
<p>继续本地测试：<br><strong><code>$ hexo server</code></strong> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><strong><code>[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></strong><br>表明Hexo Server已经启动了，在浏览器中打开 <a href="http://localhost:4000/，这时可以看到Hexo已为你生成了一篇blog。" target="_blank" rel="external">http://localhost:4000/，这时可以看到Hexo已为你生成了一篇blog。</a><br>你可以按Ctrl+C 停止Server。<br>但是有时候4000不能用，可以试试以下方法：<br><strong><code>$ hexo server -s</code></strong> #静态模式<br><strong><code>$ hexo server -p 5000</code></strong> #更改端口<br><strong><code>$ hexo server -i 192.168.1.1</code></strong> #自定义 IP</p>
<p>以后每次更新，只要cd到blog的文件夹，或者直接在此文件夹上右键打开Git Bash，然后运行下面的命令就可以：<br><strong><code>$ hexo clean</code></strong> #清除缓存 网页正常情况下可以忽略此条命令<br><strong><code>$ hexo generate</code></strong> #生成静态网页，可以缩写成hexo g<br><strong><code>$ hexo deploy</code></strong> #开始部署，可以缩写成hexo d<br>平时发布文章，可以直接：<br><strong><code>$ hexo g</code></strong><br><strong><code>$ hexo d</code></strong></p>
<h3 id="4-其他功能"><a href="#4-其他功能" class="headerlink" title="4. 其他功能"></a>4. 其他功能</h3><p><strong>rss</strong><br>rss的安装非常简单 ，已经有人做好了插件，安装只需一步。<br><strong><code>$ npm install hexo-generator-feed --save</code></strong><br>启动服务器，用浏览器打开 <a href="http://localhost:4000/atom.xml，" target="_blank" rel="external">http://localhost:4000/atom.xml，</a> 就可以看到RSS已经生效了。<br>记得确保_config.yml中有：<br><strong>rss: /atom.xml</strong><br>或者有些主题自带了就不需要加这一行了</p>
<p><strong>sitemap</strong><br>同样是一条命令，就可以完成。<br><strong><code>$ npm install hexo-generator-sitemap --save</code></strong><br>启动服务器，用浏览器打开 用浏览器打开 <a href="http://localhost:4000/sitemap.xml" target="_blank" rel="external">http://localhost:4000/sitemap.xml</a> 发现site已经生效。</p>
<p><strong>评论</strong><br>在_config.yml中添加多说的配置：<br>duoshuo_username:  zczzxm # 你的多说帐号<br>duoshuo_share: true  # set to false if you want to use Comment without Sharing<br>但这个可能是少数主题的配置方式，其他的可以参考<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9?spm=5176.100239.blogcont33519.5.XOHsTq" title="Hexo使用多说教程" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-搭建所需环境&quot;&gt;&lt;a href=&quot;#1-搭建所需环境&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建所需环境&quot;&gt;&lt;/a&gt;1. 搭建所需环境&lt;/h3&gt;&lt;h4 id=&quot;1-1-Git&quot;&gt;&lt;a href=&quot;#1-1-Git&quot; class=&quot;headerlink&quot; title=&quot;1.1 Git&quot;&gt;&lt;/a&gt;1.1 Git&lt;/h4&gt;&lt;p&gt;首先到&lt;a href=&quot;https://git-scm.com/downloads/&quot; title=&quot;Git 下载地址&quot;&gt;这里&lt;/a&gt;下载git，然后逐步进行安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在开始菜单找到Git Bash右键属性，修改Git Bash的配置 : 将Git Bash设置为快速编辑模式, 可以更好的使用该命令行工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-2-配置SSH-Key&quot;&gt;&lt;a href=&quot;#1-2-配置SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1.2 配置SSH-Key&quot;&gt;&lt;/a&gt;1.2 配置SSH-Key&lt;/h4&gt;&lt;p&gt;打开Git bash，执行：&lt;br&gt;&lt;strong&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &amp;quot;your_email@email.com&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该命令后面的邮箱就是GitHub的注册邮箱;&lt;br&gt;使用该命令之后, 会出现提示选择ssh-key生成路径, 这里直接点回车默认即可, 生成的ssh-key在默认路径中。&lt;br&gt;Overwrite (y/n)?则输入y再回车&lt;br&gt;Enter passphrase (empty for no passphrase)则输入密码，该密码以后每次提交博客更新时都会需要；然后在确认输入一次。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://LeanGreen.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Github" scheme="http://LeanGreen.github.io/tags/Github/"/>
    
      <category term="blog" scheme="http://LeanGreen.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
